# .github/workflows/generate_and_analyze_logs.yml

name: Generate Test Log Data and Analyze

on:
  schedule:
    - cron: '0 0 * * 0,2,4' # Midnight UTC on Sun, Tue, Thu
  workflow_dispatch:
    inputs:
      dates:
        description: 'Date options: "today", "yesterday", "last3days", or comma-separated YYYYMMDD dates'
        required: false
        default: 'today'
      time_slots:
        description: 'Number of time slots per date (if not using specific time periods)'
        required: false
        default: '1'
      include_morning:
        description: 'Include morning logs (8:00-11:59)'
        required: false
        default: 'true'
        type: boolean
      include_afternoon:
        description: 'Include afternoon logs (12:00-17:59)'
        required: false
        default: 'false'
        type: boolean
      include_evening:
        description: 'Include evening logs (18:00-23:59)'
        required: false
        default: 'false'
        type: boolean

jobs:
  generate-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate structured log files
        run: |
          TIME_ARGS=""
          if [[ "${{ github.event.inputs.include_morning }}" == "true" ]]; then
            TIME_ARGS="$TIME_ARGS --morning"
          fi
          if [[ "${{ github.event.inputs.include_afternoon }}" == "true" ]]; then
            TIME_ARGS="$TIME_ARGS --afternoon"
          fi
          if [[ "${{ github.event.inputs.include_evening }}" == "true" ]]; then
            TIME_ARGS="$TIME_ARGS --evening"
          fi

          if [ -f "scripts/generate_logs.py" ]; then
            echo "Running log generator script..."
            python scripts/generate_logs.py \
              --output-dir ./sample_logs_generated \
              --dates ${{ github.event.inputs.dates || 'today' }} \
              --time-slots ${{ github.event.inputs.time_slots || 1 }} \
              $TIME_ARGS
          else
            echo "Skipping log generation: scripts/generate_logs.py not found."
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start Docker SFTP server
        run: |
          echo "Building and starting SFTP server container..."
          # Using 'down --remove-orphans' for cleaner stops, ignore errors if not running
          docker compose down --remove-orphans || true
          docker compose up --build -d sftp-server

          echo "Waiting for SFTP server to start..."
          sleep 10

          echo "Checking container status:"
          docker compose ps

      - name: Analyze logs using log_analyzer.py
        working-directory: ${{ github.workspace }}
        env:
          SSH_HOSTNAME: ${{ secrets.SSH_HOSTNAME }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "Running log analyzer script..."
          python src/log_analyzer.py

      - name: Update README with tracker summary
        run: |
          echo "Updating README with tracker summary..."
          python scripts/update_readme.py

      - name: Commit and push changes
        run: |
          echo "Checking for changes to commit..."
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git status
          git add ./sample_logs_generated/ ./data/log_analysis_tracker.xlsx README.md

          # Check diff-index to see if anything was actually staged
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
            exit 0
          fi

          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S_UTC")
          echo "Committing changes..."
          git commit -m "Automated Log Analysis Update - $TIMESTAMP"
          echo "Pushing changes..."
          git push